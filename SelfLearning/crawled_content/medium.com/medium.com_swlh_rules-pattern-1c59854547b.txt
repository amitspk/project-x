=== METADATA ===
Title: Rules Pattern. A few weeks back, someone tagged me in‚Ä¶ | by Ionut Ciuta | The Startup | Medium
Description: Rules Pattern A few weeks back, someone tagged me in a company wide ‚ÄúGood Practices‚Äù challenge and I ended up writing a long post that I shared on Teams. I enjoyed doing that quite a lot and I ‚Ä¶
Author: Ionut Ciuta
Og_Title: Rules Pattern
Og_Description: A few weeks back, someone tagged me in a company wide ‚ÄúGood Practices‚Äù challenge and I ended up writing a long post that I shared on Teams‚Ä¶
Canonical_Url: https://medium.com/swlh/rules-pattern-1c59854547b
Language: en
Charset: utf-8
====================

=== MAIN ARTICLE CONTENT ===
Rules Pattern
Ionut Ciuta
5 min read
¬∑
Oct 18, 2020
--
1
Listen
Share
Press enter or click to view image in full size
Photo by
Joshua Miranda
from
Pexels
A few weeks back, someone tagged me in a company wide ‚ÄúGood Practices‚Äù challenge and I ended up writing a long post that I shared on Teams. I enjoyed doing that quite a lot and I decided to share it here as well, in a more detailed format. Here‚Äôs what I came up with.
On multiple occasions in my career I was tasked with checking some input data ‚Äî e.g. an incoming HTTP request ‚Äî against multiple business rules. Most of the time, my instinct would say ‚ÄúJust drag that thing through some if statements‚Äù. However, after doing this a couple of times, I realised that there has to be a better way of implementing this. Managing a big if-else block is not fun especially when the number of conditions you have to check is dynamic and can vary based on business needs. I‚Äôm also not very keen on using switch statements for many of the same reasons.
In my quest to become a more productive programmer, I ended up doing a bit of studying and came across the Rule Pattern. All of the code that you‚Äôll see bellow is hosted
here on GitHub
. It‚Äôs mostly Java with a few
Spring
annotations on top of it.
The problem
Say we have an online shop. We want our shop to be smart so that we can give our customers
contextual offers
based on
the content of their basket
and other variables such as
the date of the order
.
e.g.
It‚Äôs October, Halloween üéÉ season is in full effect and, soon after that, Christmas üéÑ is just around the corner. We want our shop to have promotions for both holidays. However we want to apply them accordingly. How should we go about this?
Let‚Äôs say we have this basket:
Basket basket = new Basket();
basket.addItem(new Item("The Shinning Book", 5.0));
basket.addItem(new Item("Hereditary Bluray", 15.00));
basket.addItem(new Item("The extremely expensive new Iphone", 1400.00));
The easiest way to check what promotions to apply is to just drag the basket through an unpleasant
if-else
block
or even ‚Äî God forbid ‚Äî a
switch
üëª.
Yes, the code above is
awful
. It
breaks
many common sense rules. It‚Äôs
dense
, it does
too many things
and
handles
too much business
. It also
resists change
. Adding a new rule means adding a new if statement. Also,
good luck testing this
.
The way I like to design this is by using
rules
. After I found this pattern, I used this approach on several projects and it proved to be a
flexible way of decomposing large decision logic
.
The solution
We first need to define what a rule is. A rule should contain
the logic that dictates whether or not it can be applied to a target object
and
the logic that it should apply
.
public interface IRule<E> {
boolean matches(E input);
void apply(E input);
}
The rule above is a bit too generic, E is not an actual type. Let‚Äôs make it a bit more specific.
public interface BasketRule extends IRule<Basket> {}
Based on this blueprint, we can set up actual rules that apply promotion logic to our basket. Here is an example:
Our
HalloweenPromotion
gives all of our customers
a free skeleton suit
üíÄ and a
13
(dollars?) discount
based on the logic in the
apply
function. That‚Äôs a pretty neat deal if you ask me! However, as per the
matches
function, this is applicable only if the order was created in October and it‚Äôs still October when rule is evaluated.
Let‚Äôs add a simpler rule:
This rule is straightforward. If your order
is bigger than 1000
, you get a
discount of 100
. Let‚Äôs add a 3rd rule that hopefully won‚Äôt be applied during Halloween season:
This last rule would give you a free Santa hat üéÖüèª and a small discount if your order was placed near Christmas. Notice that all the rules described above are annotated with
Spring‚Äôs Component
. This example works neatly with Spring, but you can apply it just as well for plain Java.
@Autowired
private List<BasketRule> promotionRules;
Through some Spring magic and plain old polymorphism, we now have all our rules nicely grouped together. We just need the logic to apply them which again is super smooth and can be as simple as using streams and Lambdas:
promotionRules.stream()
.filter(rule -> rule.matches(basket))
.forEach(rule -> rule.apply(basket));
For the sake of coherence, I‚Äôve put these two pieces of code in the
PromotionEngine
class.
Conclusion
If you run my demo code, you‚Äôll see the following output:
=== BEFORE Promotions ===
Basket:
Created
: 2020-10-18T21:58:50.760277
Name: The Shinning Book
Price: 5.0
---
Name: Hereditary Bluray
Price: 15.0
---
Name: The extremely expensive new Iphone
Price: 1400.0
---
========
Total
: 1420.0
Applying promotions
Applying
DiscountForBigOrdersPromotion
promotion
-100.00
Applying
HalloweenPromotion
promotion
-13.00
Promotions applies
=== AFTER Promotions ===
Basket:
Created: 2020-10-18T21:58:50.760277
Name: The Shinning Book
Price: 5.0
---
Name: Hereditary Bluray
Price: 15.0
---
Name: The extremely expensive new Iphone
Price: 1400.0
---
Name:
Promo - Creepy Skeleton Suit
Price: 0.0
---
========
Total
: 1307.0
Let‚Äôs take a look at what just happened:
your basket has
total value
of
1420.0
and was
created in October
.
two
promotions were applied:
DiscountForBigOrdersPromotion
that gave us
-100 discount
and
HalloweenPromotion
that gave us a
-13 discount.
most importantly, you get that
free Creepy Skeleton Suit
for your socially distant Halloween party üòâüíÄ
‚ÄúOk, but isn‚Äôt this more complicated?‚Äù
You might ask. Well,
not really
. Here‚Äôs why:
you can easily add new rules or remove old ones
rule specific logic is isolated from other rules
you can easily test each rule in isolation or you can mock them accordingly
the code is much cleaner overall
Related reads
After I posted this on my company‚Äôs Teams, a colleague of mine mentioned that there might be a connection between the
Rules Pattern
and the
Chain of Responsibility (CoR) pattern
. While I‚Äôve read about CoR in the past, I felt the need to look up some implementation examples and I stumbled across
this thorough article
. I highly recommend you read through it. I would say that the Rules Pattern is
a specialisation
of the CoR pattern
with some caveats
.
In the version I described, the rules ‚Äî or handlers as per the mentioned article ‚Äî are
unordered
and are
applied exhaustively
meaning the input is processed by all rules in no particular order.
Don‚Äôt forget to take a look at the demo code on
GitHub
.
Thanks for reading! üôèüèª

=== HEADLINES ===
## The Startup
   [DOM: h2, classes: bg, gv, gw, ef, gx, gy, eh, gz, ha, hb, hc, hd, he, hf, hg, hh, hi, bl]
# Rules Pattern
   [DOM: h1, classes: pw-post-title, ix, iy, iz, bg, ja, jb, jc, jd, je, jf, jg, jh, ji, jj, jk, jl, jm, jn, jo, jp, jq, jr, js, jt, ju, jv, jw, jx, jy, jz, bl]
## The problem
   [DOM: h2, classes: pv, pw, iz, bg, px, py, pz, qa, gx, qb, qc, qd, gz, qe, qf, qg, qh, qi, qj, qk, ql, qm, qn, qo, qp, qq, bl]
## The solution
   [DOM: h2, classes: pv, pw, iz, bg, px, py, pz, qa, gx, qb, qc, qd, gz, qe, qf, qg, qh, qi, qj, qk, ql, qm, qn, qo, qp, qq, bl]
## Conclusion
   [DOM: h2, classes: pv, pw, iz, bg, px, py, pz, qa, gx, qb, qc, qd, gz, qe, qf, qg, qh, qi, qj, qk, ql, qm, qn, qo, qp, qq, bl]
## Related reads
   [DOM: h2, classes: pv, pw, iz, bg, px, py, pz, qa, gx, qb, qc, qd, gz, qe, qf, qg, qh, qi, qj, qk, ql, qm, qn, qo, qp, qq, bl]
## Published inThe Startup
   [DOM: h2, classes: pw-author-name, bg, gv, tt, tu, tv, tw, tx, ty, ha, hb, hc, hd, he, hf, hg, hh, hi, bl]
## Written byIonut Ciuta
   [DOM: h2, classes: pw-author-name, bg, gv, tt, tu, tv, tw, tx, ty, ha, hb, hc, hd, he, hf, hg, hh, hi, bl]
## Responses (1)
   [DOM: h2, classes: bg, gv, py, qa, gx, qb, qd, gz, qe, qg, qh, qi, qk, ql, qm, qo, qp, bl]

=== CONTENT PARAGRAPHS ===
[Paragraph 1] (18 words)
   [DOM: p.bg.b.bh.ab.eb, parent: div]
   Get smarter at building your thing. Follow to join The Startup‚Äôs +8 million monthly readers & +772K followers.

[Paragraph 2] (54 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   A few weeks back, someone tagged me in a company wide ‚ÄúGood Practices‚Äù challenge and I ended up writing a long post that I shared on Teams. I enjoyed doing that quite a lot and I decided to share it here as well, in a more detailed format. Here‚Äôs what I came up with.

[Paragraph 3] (104 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   On multiple occasions in my career I was tasked with checking some input data ‚Äî e.g. an incoming HTTP request ‚Äî against multiple business rules. Most of the time, my instinct would say ‚ÄúJust drag that thing through some if statements‚Äù. However, after doing this a couple of times, I realised that there has to be a better way of implementing this. Managing a big if-else block is not fun especially when the number of conditions you have to check is dynamic and can vary based on business needs. I‚Äôm also not very keen on using switch statements for many of the same reasons.

[Paragraph 4] (45 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   In my quest to become a more productive programmer, I ended up doing a bit of studying and came across the Rule Pattern. All of the code that you‚Äôll see bellow is hostedhere on GitHub. It‚Äôs mostly Java with a fewSpringannotations on top of it.

[Paragraph 5] (34 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.qr.pf.pg.ph.qs.pj.pk.ha.qt.pm.pn.hd.qu.pp.pq.hg.qv.ps.pt.pu.ia.bl, parent: div]
   Say we have an online shop. We want our shop to be smart so that we can give our customerscontextual offersbased onthe content of their basketand other variables such asthe date of the order.

[Paragraph 6] (43 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   e.g.It‚Äôs October, Halloween üéÉ season is in full effect and, soon after that, Christmas üéÑ is just around the corner. We want our shop to have promotions for both holidays. However we want to apply them accordingly. How should we go about this?

[Paragraph 7] (6 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Let‚Äôs say we have this basket:

[Paragraph 8] (24 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   The easiest way to check what promotions to apply is to just drag the basket through an unpleasantif-elseblockor even ‚Äî God forbid ‚Äî aswitchüëª.

[Paragraph 9] (33 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Yes, the code above isawful. Itbreaksmany common sense rules. It‚Äôsdense, it doestoo many thingsandhandlestoo much business. It alsoresists change. Adding a new rule means adding a new if statement. Also,good luck testing this.

[Paragraph 10] (34 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   The way I like to design this is by usingrules. After I found this pattern, I used this approach on several projects and it proved to be aflexible way of decomposing large decision logic.

[Paragraph 11] (32 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.qr.pf.pg.ph.qs.pj.pk.ha.qt.pm.pn.hd.qu.pp.pq.hg.qv.ps.pt.pu.ia.bl, parent: div]
   We first need to define what a rule is. A rule should containthe logic that dictates whether or not it can be applied to a target objectandthe logic that it should apply.

[Paragraph 12] (21 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   The rule above is a bit too generic, E is not an actual type. Let‚Äôs make it a bit more specific.

[Paragraph 13] (21 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Based on this blueprint, we can set up actual rules that apply promotion logic to our basket. Here is an example:

[Paragraph 14] (48 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   OurHalloweenPromotiongives all of our customersa free skeleton suitüíÄ and a13(dollars?) discountbased on the logic in theapplyfunction. That‚Äôs a pretty neat deal if you ask me! However, as per thematchesfunction, this is applicable only if the order was created in October and it‚Äôs still October when rule is evaluated.

[Paragraph 15] (5 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Let‚Äôs add a simpler rule:

[Paragraph 16] (28 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   This rule is straightforward. If your orderis bigger than 1000, you get adiscount of 100. Let‚Äôs add a 3rd rule that hopefully won‚Äôt be applied during Halloween season:

[Paragraph 17] (50 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   This last rule would give you a free Santa hat üéÖüèª and a small discount if your order was placed near Christmas. Notice that all the rules described above are annotated withSpring‚Äôs Component. This example works neatly with Spring, but you can apply it just as well for plain Java.

[Paragraph 18] (40 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Through some Spring magic and plain old polymorphism, we now have all our rules nicely grouped together. We just need the logic to apply them which again is super smooth and can be as simple as using streams and Lambdas:

[Paragraph 19] (14 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   For the sake of coherence, I‚Äôve put these two pieces of code in thePromotionEngineclass.

[Paragraph 20] (11 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.qr.pf.pg.ph.qs.pj.pk.ha.qt.pm.pn.hd.qu.pp.pq.hg.qv.ps.pt.pu.ia.bl, parent: div]
   If you run my demo code, you‚Äôll see the following output:

[Paragraph 21] (8 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Let‚Äôs take a look at what just happened:

[Paragraph 22] (12 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   ‚ÄúOk, but isn‚Äôt this more complicated?‚ÄùYou might ask. Well,not really. Here‚Äôs why:

[Paragraph 23] (101 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.qr.pf.pg.ph.qs.pj.pk.ha.qt.pm.pn.hd.qu.pp.pq.hg.qv.ps.pt.pu.ia.bl, parent: div]
   After I posted this on my company‚Äôs Teams, a colleague of mine mentioned that there might be a connection between theRules Patternand theChain of Responsibility (CoR) pattern. While I‚Äôve read about CoR in the past, I felt the need to look up some implementation examples and I stumbled acrossthis thorough article. I highly recommend you read through it. I would say that the Rules Pattern isa specialisationof the CoR patternwith some caveats.In the version I described, the rules ‚Äî or handlers as per the mentioned article ‚Äî areunorderedand areapplied exhaustivelymeaning the input is processed by all rules in no particular order.

[Paragraph 24] (11 words)
   [DOM: p.pw-post-body-paragraph.pa.pb.iz.pc.b.pd.pe.pf.pg.ph.pi.pj.pk.ha.pl.pm.pn.hd.po.pp.pq.hg.pr.ps.pt.pu.ia.bl, parent: div]
   Don‚Äôt forget to take a look at the demo code onGitHub.

[Paragraph 25] (18 words)
   [DOM: p.bg.b.bh.ab.bl, parent: div]
   Get smarter at building your thing. Follow to join The Startup‚Äôs +8 million monthly readers & +772K followers.

[Paragraph 26] (6 words)
   [DOM: p.bg.b.bh.ab.bl, parent: div]
   Internet homebasewww.ionutciuta.com@johnofardeal everywhere on the internet
